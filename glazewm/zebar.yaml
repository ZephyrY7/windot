# Yaml is white-space sensitive (use 2 spaces to indent).

###
# Define a new window with an id of 'bar'. This window can then be opened
# via the Zebar cli by running 'zebar open bar --args <ARGS...>'.
#
# Docs regarding window: https://some-future-docs-link.com
window/bar:
  providers: ['self']
  # Width of the window in physical pixels.
  width: '{{ Number(self.args.MONITOR_WIDTH) - 10 }}'
  # Height of the window in physical pixels.
  height: '42'
  # X-position of the window in physical pixels.
  position_x: '{{ Number(self.args.MONITOR_X) + 5 }}'
  # Y-position of the window in physical pixels.
  position_y: '{{  Number(self.args.MONITOR_Y) + 1035 }}'
  # Whether to show the window above/below all others.
  # Allowed values: 'always_on_top', 'always_on_bottom', 'normal'.
  z_order: 'normal'
  # Whether the window should be shown in the taskbar.
  shown_in_taskbar: false
  # Whether the window should have resize handles.
  resizable: false
  # Styles to apply globally within the window. For example, we can use
  # this to import the Nerdfonts icon font. Ref https://www.nerdfonts.com/cheat-sheet
  # for a cheatsheet of available Nerdfonts icons.
  global_styles: |
    @import "https://www.nerdfonts.com/assets/css/webfont.css";
  # CSS styles to apply to the root element within the window. Using CSS
  # nesting, we can also target nested elements (e.g. below we set the
  # color and margin-right of icons).
  styles: |
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    align-items: center;
    height: 100%;
    color: #cdd6f4;
    font-family: Cascadia Mono, monospace;
    font-size: 12px;
    padding: 0px 12px;
    background: rgba(30, 30, 46, 0.77);
    border-radius: 10px;
    border: 1px solid #89b4fa;

    i {
      color: rgb(115 130 175 / 95%);
      margin-right: 7px;
    }

  group/left:
    styles: |
      display: flex;
      align-items: center;

    template/glazewm_workspaces:
      styles: |
        display: flex;
        align-items: center;

        .workspace {
          background: rgb(255 255 255 / 15%);
          margin-right: 4px;
          padding: 0; 
          width: 18px;
          height: 18px;
          color: #181825; 
          border: none;
          border-radius: 100%;
          cursor: pointer;

          &.displayed {
            width: auto;
            background: #89b4fa;
            border-radius: 24px;
            padding: 0px 6px;
          }

          &:focus,
          &:hover {
            background: #b6befe;
          }
        }
      providers: ['glazewm']
      events:
        - type: 'click'
          fn_path: 'script.js#focusWorkspace'
          selector: '.workspace'
      template: |
        @for (workspace of glazewm.currentWorkspaces) {
          <button
            class="workspace {{ workspace.hasFocus ? 'focused' : '' }} {{ workspace.isDisplayed ? 'displayed' : '' }}"
            id="{{ workspace.name }}"
          >
            {{ (workspace.isDisplayed || workspace.hasFocus) ? workspace.displayName ?? workspace.name : '' }}
          </button>
        }

  group/center:
    styles: |
      justify-self: center;

    template/clock:
      providers: ['date']
      styles: |
        color: #cdd6f4;

        .custom-margin {
          margin-left: 15px;
        }
      # Available date tokens: https://moment.github.io/luxon/#/formatting?id=table-of-tokens
      template: |
      
        <i class="nf nf-fa-calendar_day"></i>
        {{ date.toFormat(date.now, 'EEE	d MMM') }}
        <i class="nf nf-md-clock custom-margin"></i>
        {{ date.toFormat(date.now, 'T') }}

  group/right:
    styles: |
      justify-self: end;
      display: flex;

      .template {
        margin-left: 20px;
      }

    template/glazewm_other:
      providers: ['glazewm']
      styles: |
        .binding-mode,
        .tiling-direction {
          background: transparent;
          color: #89b4fa;
          margin: 0;
        }

      template: |
        @for (bindingMode of glazewm.bindingModes) {
          <span class="binding-mode">
            {{ bindingMode.displayName ?? bindingMode.name }}
          </span>
        }

        @if (glazewm.tilingDirection === 'horizontal') {
          <i class="tiling-direction nf nf-md-swap_horizontal"></i>
        } @else {
          <i class="tiling-direction nf nf-md-swap_vertical"></i>
        }

    template/network:
      providers: ['network']
      styles: |
        i {
          margin-right: 0;
          color: #89b4fa;
        }
      template: |
        <!-- Show icon based on signal strength. -->
        @if (network.defaultInterface?.type === 'ethernet') {
          <i class="nf nf-md-ethernet_cable"></i>
        } @else if (network.defaultInterface?.type === 'wifi') {
          @if (network.defaultGateway?.signalStrength >= 80) {<i class="nf nf-md-wifi_strength_4"></i>}
          @else if (network.defaultGateway?.signalStrength >= 65) {<i class="nf nf-md-wifi_strength_3"></i>}
          @else if (network.defaultGateway?.signalStrength >= 40) {<i class="nf nf-md-wifi_strength_2"></i>}
          @else if (network.defaultGateway?.signalStrength >= 25) {<i class="nf nf-md-wifi_strength_1"></i>}
          @else {<i class="nf nf-md-wifi_strength_outline"></i>}
        } @else {
          <i class="nf nf-md-wifi_strength_off_outline"></i>
        }

    template/battery:
      providers: ['battery']
      styles: |
        position: relative;
        color: #cdd6f4;

        .charging-icon {
          color: #89b4fa;
          position: absolute;
          font-size: 11px;
          left: 7px;
          top: 2px;
        }

        i {
          color: #89b4fa;  
        }

      template: |

        <!-- Show icon for how much of the battery is charged. -->
        @if (battery.chargePercent > 90) {<i class="nf nf-fa-battery_4"></i>}
        @else if (battery.chargePercent > 70) {<i class="nf nf-fa-battery_3"></i>}
        @else if (battery.chargePercent > 40) {<i class="nf nf-fa-battery_2"></i>}
        @else if (battery.chargePercent > 20) {<i class="nf nf-fa-battery_1"></i>}
        @else {<i class="nf nf-fa-battery_0"></i>}

        {{ battery.isCharging ? `âš¡ ${Math.round(battery.chargePercent)}` : Math.round(battery.chargePercent) }}%
